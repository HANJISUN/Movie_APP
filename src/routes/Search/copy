// import React, { useEffect, useState } from 'react'
// import styles from './Movie.module.scss'

// import MovieCard from '../../components/MovieCard'
// import { FaSearch } from 'react-icons/fa'

// import { useRecoilState } from 'recoil'
// import { getSearchApi } from 'services/movie'
// import { searchMovieList, pageNumber } from 'states/movie'

// const Movie = () => {
//   const [movieLists, setMovieLists] = useRecoilState(searchMovieList)
//   const [searchKeyword, setSearchKeyword] = useState<string>('')
//   const [page, setPage] = useRecoilState(pageNumber)
//   const [lastItem, setLastItem] = useState<HTMLDivElement | null>(null)

//   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     setSearchKeyword(e.currentTarget.value)
//   }

//   const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
//     e.preventDefault()
//     setPage(1)
//     getMovieList()
//   }

//   const getMovieList = async () => {
//     await getSearchApi({ s: searchKeyword, page: 1 })
//       .then((res) => res.data)
//       .then((data) => {
//         if (data.Response === 'False') {
//           return
//         }

//         setMovieLists(data.Search)
//       })
//       .catch((error) => console.log(error))
//     // console.log('ðŸš€ðŸš€ðŸš€ fetching í•¨ìˆ˜ í˜¸ì¶œ')
//     // try {
//     //   const { data } = await getSearchApi({ s: searchKeyword, page: page })
//     //   setMovieLists(movieLists.concat(data.Search))
//     // } catch {
//     //   console.log('ðŸš¨ðŸš¨ðŸš¨ fetching error')
//     // }
//   }

//   const onIntersect: IntersectionObserverCallback = (entries, observer) => {
//     entries.forEach((entry) => {
//       if (entry.isIntersecting) {
//         setPage((prev) => prev + 1)
//         observer.unobserve(entry.target)
//       }
//     })
//   }

//   useEffect(() => {
//     console.log('page ? ', page)
//     getMovieList()
//   }, [page])

//   useEffect(() => {
//     let observer: IntersectionObserver
//     if (lastItem) {
//       observer = new IntersectionObserver(onIntersect, { threshold: 0.5 })
//       observer.observe(lastItem)
//     }

//     return () => observer && observer.disconnect()
//   }, [lastItem])

//   return (
//     <div>
//       <div className={styles.searchContainer}>
//         <input className={styles.searchInput} type='text' placeholder='ê²€ìƒ‰ì–´ë¥¼ ìž…ë ¥í•˜ì„¸ìš”' onChange={handleChange} />
//         <button className={styles.searchButton} type='button' onClick={handleClick}>
//           <FaSearch />
//         </button>
//       </div>
//       <section>
//         {movieLists.length > 0 ? (
//           <ul>
//             {movieLists.map((item) => (
//               <MovieCard key={item.imdbID} item={item} />
//             ))}
//           </ul>
//         ) : (
//           <span>ê²€ìƒ‰ ê²°ê³¼ê°€ ì—†ìŠµë‹ˆë‹¤.</span>
//         )}
//       </section>
//     </div>
//   )
// }

// export default Movie
